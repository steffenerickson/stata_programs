
* ---------------------------------------------------------------------------- * 
*! Multivariate Generalizability Study Decompostion Command
*! With some post estimation-mata functions that allow you to 
*! calculate confidence intervals and some G-theory coefficients (like relative profile variance)

capture program drop mvgstudy 
program mvgstudy , rclass
	syntax anything [if] [in] 
	
	marksample touse 
	tempname tempframe 
	// Set up ----------
	* Parse syntax expression
	parse_equation `anything'
	local tempvarlist `r(vars)'
	local effects `r(effects)'
	foreach var of varlist `tempvarlist' {
		local varlist : list varlist | var
	}
	* Lengths for Loops
	local lengthdepvars	   :  list sizeof local(varlist)
	local lengtheffectlist :  list sizeof local(effects)
	* Find Facets
	mata facets = uniqrows(tokens(subinstr(subinstr(invtokens(st_local("effects")),"|"," "), "#"," "))')
	mata facets = invtokens(facets')
	mata st_local("facets",facets)
	* Find Facet Levels
	capture matrix drop facetlevels 
	foreach facet of local facets {
		qui levelsof `facet' if `touse' == 1
		matrix facetlevels = (nullmat(facetlevels) \ `r(r)')
	}
	* Find Residual 
	mata residual = sort_desc_length(tokens(st_local("effects")))[1]
	mata st_local("residual",residual)
	local effects2 : list effects - residual
	// Main Routine ----------
	* (1) Run manova
	frame put `varlist' `facets' if `touse' == 1, into(`tempframe')
	frame `tempframe' {
		qui manova `varlist' = `effects2'
	}
	estimates store manova_estimates
	* (2) Collect 
	recovermanova, facets(`facets') facetlevels(facetlevels) effects(`effects') residual(`residual')
	matrix df = r(df)
	matrix flproducts = r(flproducts)
	forvalues i = 1/`lengtheffectlist' {
		matrix sscp`i' = r(sscp`i')
		local mat sscp`i'
		local matrixlist : list matrixlist | mat 
	}	
	* (3) Create P matrix (EMCP equation matrix)
	createP, effects(`effects') flproducts(flproducts)
	matrix P = r(P)
	* (4) Expected Mean Cross Products (covariance components)
	emcpmatrixprocedure, df(df) p(P) 		   
	forvalues i = 1/`lengtheffectlist' { 
		matrix covcomps`i' = r(comp`i')
	}
	// Display Results ----------
	foreach x of local varlist {
		local name   "`x'"
		local names `" `names' "`name'" "'
	}
	forvalues i = 1/`lengtheffectlist' {
		matrix rownames covcomps`i' = `names'
		matrix colnames covcomps`i' = `names'
		matlist covcomps`i' , twidth(30) title("`:word `i' of `effects'' Component Covariance Matrix")
	}
	// Return results ----------
	forvalues i = 1/`lengtheffectlist' { 
		return matrix covcomps`i' = covcomps`i'
	}
	return matrix P = P 
	return matrix df = df 
	return matrix flproducts = flproducts 		
end 

capture program drop recovermanova
program recovermanova, rclass 
	syntax,  FACETS(string) FACETLEVELS(string) EFFECTS(string) RESIDUAL(string)
	
	* recover manova results 
	local a = e(cmdline) 
	local check = strrpos("`a'","=")
	local newlist = substr("`a'",`check'+1,.)
	local length : list sizeof local(newlist)
	local j = `length' + 1
	forvalues i = 1/`j' {
		local name sscp`i'
		local sscp_tempmats : list sscp_tempmats | name
	}
	tempname tempmat df flproducts `sscp_tempmats'
	*degrees of freedom 
	forvalues i = 1/`length' {
		matrix `tempmat' = `e(df_`i')'
		matrix rownames `tempmat' = "`:word `i' of `effects''"
		matrix `df' = (nullmat(`df') \ `tempmat' )
		local++i
	}
	matrix `tempmat' = e(df_r)
	matrix rownames `tempmat' = "`residual'"
	matrix `df' = `df' \ `tempmat'
	*sums of squared cross product matrices 
	forvalues i = 1/`length' {
		matrix `sscp`i'' = e(H_`i')
		local++i
	}
	matrix `sscp`j'' = e(E)
	*facet level products
	mata st_matrix("flproducts",get_facetlevelproducts(tokens(st_local("effects")),tokens(st_local("facets")),st_matrix("`facetlevels'")))
	foreach x of local effects {
		local name   "`x'"
		local names `" `names' "`name'" "'
	}
	matrix rownames flproducts = `names'
	*return results 
	forvalues i = 1/`j' {
		return matrix sscp`i' = `sscp`i''
	}
	return matrix df = `df'
	return matrix flproducts = flproducts
end 

capture program drop createP
program createP, rclass 
	syntax,   EFFECTS(string) FLPRODUCTS(string)
	
	mata st_matrix("P",get_p(tokens(st_local("effects")),st_matrix("`flproducts'")))
	foreach x of local effects {
		local name   "`x'"
		local names `" `names' "`name'" "'
	}
	matrix rownames P = `names'
	matrix colnames P = `names'
	return matrix P = P
end 

capture program drop emcpmatrixprocedure
program emcpmatrixprocedure, rclass 
	syntax,  DF(string) P(string) 
	
	capture matrix drop stacked
	forvalues i = 1/`:colsof(`p')' {
		scalar a = df[`i',1]
		mata df = st_numscalar("a")
		mata temp = st_matrix("sscp`i'")
		mata mscp`i' = temp :/df
		mata st_matrix("mscp`i'",mscp`i')
		matrix stacked = (nullmat(stacked) \ mscp`i')
		local emcpname emcp`i'
		local emcpnames : list emcpnames | emcpname
	}
	if `:colsof(stacked)' == 1 {
		mata ems = luinv(st_matrix("`p'")) * st_matrix("stacked") 
		mata st_matrix("ems",ems)
		forvalues i = 1/`:colsof(`p')'{
			matrix comp`i' = ems[`i',1]
			return matrix comp`i' = comp`i'
		}
	}
	else {
		mata A = emcpmatrixprocedure(st_matrix("stacked"),st_matrix("`p'"),tokens(st_local("emcpnames")))	
		mata for (loc=asarray_first(A); loc!=NULL; loc=asarray_next(A, loc)) st_matrix(asarray_key(A, loc),asarray_contents(A, loc))
		forvalues i = 1/`:colsof(`p')'{
			return matrix comp`i' = emcp`i'
		}
	}
end 

cap prog drop parse_equation
program parse_equation, rclass
	syntax anything 
	
	tempname str pos i 
	mata `str' = st_local("anything")
	mata `str' = tokens(subinstr(subinstr(`str',"(",""),")",""))
	mata `pos' = strpos(`str',"=")
	mata `i' = 1
	mata while (`pos'[`i'] < 1) ++`i'
	mata st_local("vars", invtokens(`str'[1,1..`i' - 1]))
	mata st_local("effects",invtokens(`str'[1,`i' + 1..cols(`str')]))
	return local vars `vars' 
	return local effects `effects'
end

mata
string matrix sort_desc_length(string vector M)
{
	real   scalar 		i,j
	string scalar		temp 
	string matrix 		res
	
	res = M 
	for (i=2;i<=length(M);i++){
		temp = res[i]
		j = i - 1
		while (j >= 1 & strlen(temp) > strlen(res[j])) {
			res[j + 1] = res[j]
			j--
			if (j < 1) break 
		}
		res[j+1] = temp 
	}
	return(res)
}

// Rule π(α̇) = {1 if α = ω; and, otherwise, the product of the sample sizes for all indices in α̇}
real vector get_facetlevelproducts(string vector effects, string vector facets, real vector fls)
{
	real scalar 		flp,x,i,j
	real vector         flps
	
	flps = J(1,length(effects),.)
	for(i=1;i<=length(effects);i++) {
		flp = 1 
		for(j=1;j<=length(facets);j++) {
			if (strpos(effects[i],facets[j]) == 0) x = fls[j]
			else x = 1
			flp = flp * x 
		}
		flps[i] = flp 
	}
	flps = flps'
	return(flps)
	flps
}

real matrix get_p(string vector effects, real vector flproducts)
{
	string rowvector 	effects_stripped
	real scalar 		row, col 
	real matrix 		P
	
	effects_stripped = tokens(subinstr(subinstr(invtokens(effects),"|",""), "#",""))
	P = J(length(effects_stripped),length(effects_stripped),0)
	for(col=1;col<=length(effects_stripped);col++){
		row = col
		while (row >= 1) {
			P[row, col] = flproducts[col]
			--row
		}
	}
	for(row=1;row<=length(effects_stripped);row++) {
		for(col=1;col<=length(effects_stripped)-1;col++) {
			if (strpos(effects_stripped[col],effects_stripped[row])== 0) P[row,col] = 0 
		}
	}
	return(P)
}

transmorphic matrix emcpmatrixprocedure(real matrix stacked, real matrix p, string matrix names)
{
	transmorphic matrix 	emcp
	real scalar 			skip 
	real matrix 			rangemat, starting, ending, inv_p,temp,res
	real scalar 			i, j
	
	emcp = asarray_create()   
	skip = cols(stacked)
	rangemat = range(0,rows(stacked),skip)
	starting = rangemat[1..(rows(rangemat)-1)]:+1
	ending = rangemat[2..rows(rangemat)]
	inv_p = luinv(p)
	for(i=1;i<=cols(p);i++){
		res = J(cols(stacked),cols(stacked),0)
		for(j=1;j<=cols(p);j++) {
			temp = stacked[starting[j]..ending[j],1..cols(stacked)]
			res = res + (temp * inv_p[i,j])
		}
		asarray(emcp,names[i],res)
	}
	return(emcp)
}

real scalar is_colvec(z) return(anyof(("colvector","scalar"),orgtype(z)))

void row_to_col(real vector v) 
{
    if (is_colvec(v) == 0) v = v'
	else v = v 
}



real matrix satterthwaite(real vector variances,
						  real vector df,
						  real scalar ci_level)
{
	real colvector r, lower, upper 
	real matrix res 

	row_to_col(variances)
	row_to_col(df)
	r = sqrt(df/2)
	upper = variances:* (2*r:^2:/invchi2(df,(1-ci_level)/2))
	lower = variances:* (2*r:^2:/invchi2(df,(1+ci_level)/2))
	res = lower , upper 
	return(res) 
}

real scalar relativevariance(real matrix true, real matrix obs, real colvector obsmeans, real scalar df) 
{
	return(profilevar(true,obsmeans,df)/profilevar(obs,obsmeans,df))
}

real scalar profilevar(real matrix covmat, real colvector obsmeans, real scalar df)
{
	real scalar avgdiag, avgelements, profilevar
	
	avgdiag = sum(diagonal(covmat)) / rows(covmat)
	avgelements = sum(covmat) / (rows(covmat) * rows(covmat))
	profilevar = ((df - 1) / df) * (avgdiag - avgelements) + variance(obsmeans) / rows(obsmeans)
	return(profilevar)
}

real scalar errorprofilevar(real matrix errorcovmat)
{
	real scalar avgdiag, avgelements, profilevar
	
	avgdiag = sum(diagonal(errorcovmat)) / rows(errorcovmat)
	avgelements = sum(errorcovmat) / (rows(errorcovmat) * rows(errorcovmat))
	profilevar = avgdiag - avgelements
	return(profilevar)

}

real matrix off_diag(real matrix cov_mat)
{
	real scalar v, a, b, c, r, i, x
	real matrix res
	
	v = length(cov_mat[1...,1])
	a = v - 1
	b = 1
	for (i=a;i>=1;i--) {
		for (x=1;x<=i;x++) {
			c = v - i
			r = x + b
			if (b == 1 & x == 1) res = cov_mat[r,c]
			else res = (res \ cov_mat[r,c])
		}
		b++
	}
	return(res)	
}

real matrix rebuild_matrix(real matrix cov_mat, 
						    real matrix edited_covs,
					        real matrix variances)
{
	real matrix res 
	real scalar k, g, b, c, r1, r2 , i , x 
	
	res = J(rows(cov_mat),rows(cov_mat), . )
	k = 0
	g = 1
	for (i=(rows(cov_mat));i>=1;i--) {
		b = i - 1
		c = rows(cov_mat) - b 
		
		for (x=1; x <= b; x++) {
			r1 = x + k 
			r2 = x + g
			res[r2,c] = edited_covs[r1,1]
		}
		k = k + b
		g++ 
	}
	_diag(res, variances)
	_makesymmetric(res)
	return(res)
} 

string matrix off_diag_key(real matrix cov_mat)
{
	real   scalar v, a, b, c, r, i, x
	string matrix res
	string scalar str1, str2, str 
	
	v = length(cov_mat[1...,1])
	a = v - 1
	b = 1
	for (i=a;i>=1;i--) {
		for (x=1;x<=i;x++) {
			c = v - i
			r = x + b
			str1 = strofreal(r)
			str2 = strofreal(c)
			str = str2 + " " + str1
			if (b == 1 & x == 1) res = str
			else res = (res \ str)
		}
		b++
	}
	return(res)	
}
end 

* ---------------------------------------------------------------------------- * 
*! Mata Class to Simulate Stuctural Equation Models
*! Creates a covariance matrix that can be passed to the drawnorm command 

mata 
class semgenerate
{
	public:
	real matrix covariance()
	real colvector means()
	
	void init()
	void setlambday()
	void setthetay()
	void setbeta()
	void setpsi()
	void setlambdax()
	void setthetax()
	void setgamma()
	void setphi()
	void setkappa() 
	void setalpha()

	private: 
	real matrix 	Lambday 
	real matrix 	Thetay  
	real matrix 	Beta     
	real matrix 	Psi      
	real matrix 	Lambdax 
	real matrix 	Thetax  
	real matrix 	Gamma    
	real matrix 	Phi  
	real colvector 	kappa
	real colvector 	alpha 
	real matrix 	IminusBeta
	real matrix 	YY
	real matrix 	XX 
	real matrix 	YX
	real matrix 	XY 
	real vector 	upsilony
	real vector 	upsilonx
	
	void getyy()
	void getxx()
	void getyx()
	void getxy()
	void getiminusbeta()
	void getupsilony()
	void getupsilonynoexog()
	void getupsilonx()	
}


void semgenerate::init()
{
	IminusBeta = J(0,0,.)
	Lambday = J(0,0,.)
	Thetay  = J(0,0,.)
	Beta    = J(0,0,.)
	Psi     = J(0,0,.)
	Lambdax = J(0,0,.)
	Thetax  = J(0,0,.)
	Gamma   = J(0,0,.)
	Phi     = J(0,0,.)
	kappa   = J(0,0,.)
	alpha   = J(0,0,.)
} 
void semgenerate::setlambday(real matrix Lambday)
{
	this.Lambday = Lambday
	// add verification
} 
void semgenerate::setthetay(real matrix Thetay)
{
	this.Thetay = Thetay
	// add verification
}
void semgenerate::setbeta(real matrix Beta) 
{
	this.Beta = Beta 
	// add verification
}
void semgenerate::setpsi(real matrix Psi) 
{
	this.Psi = Psi 
	// add verification
}
void semgenerate::setlambdax(real matrix Lambdax) 
{
	this.Lambdax = Lambdax
	// add verification
}	
void semgenerate::setthetax(real matrix Thetax) 
{
	this.Thetax = Thetax
	// add verification
}
void semgenerate::setgamma(real matrix Gamma) 
{
	this.Gamma = Gamma
	// add verification
}
void semgenerate::setphi(real matrix Phi) 	
{
	this.Phi = Phi	
	// add verification
}
void semgenerate::setkappa(real vector kappa) 
{
	this.kappa = kappa
	// add verification
}
void semgenerate::setalpha(real vector alpha) 
{
	this.alpha = alpha	
	// add verification
}
void semgenerate::getiminusbeta()
{
	IminusBeta = I(rows(Beta),rows(Beta)) - Beta
}
void semgenerate::getxx()
{
	XX = Lambdax * Phi * Lambdax' + Thetax
}
void semgenerate::getyy()
{
	YY = Lambday * luinv(IminusBeta) * (Gamma * Phi * Gamma' + Psi) * luinv(IminusBeta)' * Lambday' + Thetay
}
void semgenerate::getyx()
{
	YX = Lambday * luinv(IminusBeta) * Gamma * Phi * Lambdax'
}
void semgenerate::getxy() 
{
	XY = Lambdax * Phi * Gamma' * luinv(IminusBeta)' * Lambday'
}
void semgenerate::getupsilonx()
{
	upsilonx = Lambdax * kappa
}
void semgenerate::getupsilony()
{
	upsilony = Lambday * luinv(IminusBeta) * (alpha + (Gamma * kappa))
}
void semgenerate::getupsilonynoexog()
{
	upsilony = Lambday * alpha
}
real matrix semgenerate::covariance() 
{
	real matrix Sigma 
	
	if (Lambday == J(0,0,.) & Thetay == J(0,0,.) & Beta == J(0,0,.) & Psi == J(0,0,.) & Gamma == J(0,0,.)) {
		getxx()
		Sigma = XX
	}
	else if (Lambdax == J(0,0,.) & Thetax == J(0,0,.) & Gamma == J(0,0,.) & Phi == J(0,0,.)) {
		getiminusbeta()
		Gamma = 1
		Phi = J(rows(Psi),cols(Psi),0)
		getyy()
		Sigma = YY
	}
	else {
		if (Beta == J(0,0,.)) Beta = J(cols(Lambday),cols(Lambday),0)
		getiminusbeta()
		getyy()
		getxx()
		getyx()
		getxy()	
		Sigma = (YY,YX \ XY,XX)
	}
	_makesymmetric(Sigma)
	return(Sigma)
}
real colvector semgenerate::means() 
{
	real matrix means
	
	if (alpha == J(0,0,.)) {
		getupsilonx()
		means = upsilonx
	}
	else if ( alpha != J(0,0,.) & kappa == J(0,0,.)) {
		getupsilonynoexog()
		means = upsilony
	}
	else {
		if (IminusBeta == J(0,0,.)) getiminusbeta() 
		getupsilony()
		getupsilonx()
		means = upsilony \ upsilonx
	}
	return(means)
}

end

* ---------------------------------------------------------------------------- * 
*! Functions and programs I use to simulate crossed designs in SEM and a 
*! command to set complicated error structures in crossed designs 

prog loadingpattern, rclass
	
	syntax namelist 
	
	tempname tempframe tempmat loadingmat 
	mkf `tempframe'
	
	quietly {
		foreach rowname of local namelist {
			local rownames `"`rownames'"`rowname'""'
		}		
		mata `tempmat' = list_to_mat("`namelist'")
		frame `tempframe' {
				getmata (v*) = `tempmat'
				foreach v of var * {
					tab `v', gen(`v'_)
					levelsof `v', local(list)
					local newlist
					foreach name of local list {
						local newlist : list newlist | name
					}
					rename (`v'_*) (`newlist')
					drop `v'
				}
				mkmat * , matrix(`loadingmat')
				foreach var of varlist * {
					local colnames `"`colnames'"`var'""'
				}		
				mat rownames `loadingmat' = `rownames'
				mat colnames `loadingmat' = `colnames'
			}
		return matrix loadingmat = `loadingmat'
		return local vars `list'
	}
end

mata
string matrix list_to_mat(string scalar vars) 
{
	string rowvector 	varvec
	string matrix 		varmat
	real scalar 		factors,i
	
	varvec = tokens(vars)
	factors = rowsum(ustrwordcount(ustrsplit(varvec[1],"_")))
	varmat = J(cols(varvec),factors,"")
	for (i=1;i<=length(varvec);i++) {
		varmat[i,1...] = ustrsplit(varvec[i],"_")
	}
	return(varmat)
}
end

program errorstructure , rclass 

	syntax namelist, stub(string) pattern1(numlist min=2 max=2) [pattern2(numlist min=2 max=2) 	pattern3(numlist min=2 max=2) pattern4(numlist min=2 max=2)]
					  
	tempname errormat
	
	matrix  `errormat' = J(`: word count `namelist'',`: word count `namelist'',0)
	forvalues i = 1/`: word count `namelist'' { 
		forvalues j = 1/`: word count `namelist'' {
			if (strpos("`:word `i' of `namelist''","`stub'") > 0 &  strpos("`:word `j' of `namelist''","`stub'") > 0) {
				if ("`pattern4'" != "") {
					local row1  = substr("`:word `i' of `namelist''",`:word 1 of `pattern1'',`:word 2 of `pattern1'')
					local col1  = substr("`:word `j' of `namelist''",`:word 1 of `pattern1'',`:word 2 of `pattern1'')
					local row2  = substr("`:word `i' of `namelist''",`:word 1 of `pattern2'',`:word 2 of `pattern2'')
					local col2  = substr("`:word `j' of `namelist''",`:word 1 of `pattern2'',`:word 2 of `pattern2'')
					local row3  = substr("`:word `i' of `namelist''",`:word 1 of `pattern3'',`:word 2 of `pattern3'')
					local col3  = substr("`:word `j' of `namelist''",`:word 1 of `pattern3'',`:word 2 of `pattern3'')
					local row4  = substr("`:word `i' of `namelist''",`:word 1 of `pattern4'',`:word 2 of `pattern4'')
					local col4  = substr("`:word `j' of `namelist''",`:word 1 of `pattern4'',`:word 2 of `pattern4'')
					if ("`row1'" == "`col1'" | "`row2'" == "`col2'" | "`row3'" == "`col3'" | "`row4'" == "`col4'")  mat `errormat'[`i',`j'] = .
				}
				else if ("`pattern3'" != "") {
					local row1  = substr("`:word `i' of `namelist''",`:word 1 of `pattern1'',`:word 2 of `pattern1'')
					local col1  = substr("`:word `j' of `namelist''",`:word 1 of `pattern1'',`:word 2 of `pattern1'')
					local row2  = substr("`:word `i' of `namelist''",`:word 1 of `pattern2'',`:word 2 of `pattern2'')
					local col2  = substr("`:word `j' of `namelist''",`:word 1 of `pattern2'',`:word 2 of `pattern2'')
					local row3  = substr("`:word `i' of `namelist''",`:word 1 of `pattern3'',`:word 2 of `pattern3'')
					local col3  = substr("`:word `j' of `namelist''",`:word 1 of `pattern3'',`:word 2 of `pattern3'')
					if ("`row1'" == "`col1'" | "`row2'" == "`col2'" | "`row3'" == "`col3'")  mat `errormat'[`i',`j'] = .
				}
				else if ("`pattern2'" != "") {
					local row1  = substr("`:word `i' of `namelist''",`:word 1 of `pattern1'',`:word 2 of `pattern1'')
					local col1  = substr("`:word `j' of `namelist''",`:word 1 of `pattern1'',`:word 2 of `pattern1'')
					local row2  = substr("`:word `i' of `namelist''",`:word 1 of `pattern2'',`:word 2 of `pattern2'')
					local col2  = substr("`:word `j' of `namelist''",`:word 1 of `pattern2'',`:word 2 of `pattern2'')
					if ("`row1'" == "`col1'" | "`row2'" == "`col2'")  mat `errormat'[`i',`j'] = .
				}
				else {
					local row1  = substr("`:word `i' of `namelist''",`:word 1 of `pattern1'',`:word 2 of `pattern1'')
					local col1  = substr("`:word `j' of `namelist''",`:word 1 of `pattern1'',`:word 2 of `pattern1'')
					if ("`row1'" == "`col1'")   mat `errormat'[`i',`j'] = .
				}
			}
			else {
				if ("`:word `i' of `namelist''" == "`:word `j' of `namelist''") mat `errormat'[`i',`j'] = .
			}
		}
	}
	
	foreach var of local namelist {
		local names `"`names'"`var'""'
	}		
	mat rownames `errormat' = `names'
	mat colnames `errormat' = `names'
	

	return matrix errormat = `errormat'
	
end 

mata
real matrix edit_param_mat(real matrix loadingmat,
					real scalar set1to1, // option finds the first nonzero element to replace as 1 and replaces subsequent non-zero elements with random numbers
					real scalar lower, 
					real scalar upper) 
{						 			
	real scalar i,j,first_nonzero_found
	real matrix loadingmat_edited
	
	loadingmat_edited = loadingmat
	for (i=1;i<=cols(loadingmat);i++){
		first_nonzero_found = 0
		for (j=1; j<=rows(loadingmat); j++) {
			if (loadingmat[j,i] != 0) {
				if (first_nonzero_found == 0 & set1to1 == 1) {
					first_nonzero_found = 1
					loadingmat_edited[j,i] = 1
				} 
				else {
					loadingmat_edited[j,i] = runiform(1,1,lower,upper)
				}
			}
		}
	}
	return(loadingmat_edited)
}			  
end

* ---------------------------------------------------------------------------- * 
*! Functions that allow you to generate crossed designs and sample from them 

program crosseddesign, nclass 
	syntax namelist, facetlevels(numlist)

	tempname r x
	local num = `:word count `namelist''
	quietly {
		forvalues i = 1/`num' {
			mata `r' = `:word `i' of `facetlevels''
			mata `x' = range(1,`r',1)
			mata st_matrix("`x'",`x')
			svmat `x'
			rename `x'1 `:word `i' of `namelist''
		}
		fillin `namelist'
		foreach var of varlist * {
			drop if `var' == . 
		}
		drop _fillin 
	}
end 

program nestedfacet, nclass
	syntax namelist(max=1),  		///
	objofmeas(namelist max=1) 		///
	crossedfacet(namelist max=1) 	///
	N(integer) 						///
	K(integer)					    ///
	perobs(integer) 				///
	[seednum(numlist max = 1)]
	
	tempname tempframe perms 
	
	if ("`setseed'" != "") set seed `setseed'
	qui levelsof `crossedfacet'
	local lvs = r(r)
	if (`k' / `perobs') <  `lvs' {
		di "Not enough `namelist' to assign `perobs' to each `crossedfacet'"
		exit 
	}
	
	qui levelsof `objofmeas'
	local samplesize = r(r)
	mata st_matrix("`perms'",permn(`n',`k'))
	mkf `tempframe' 
	quietly {
		frame `tempframe' {
			svmat `perms'
			gen randnum = runiform()
			sort randnum
			gen `objofmeas' = _n 
			keep if `objofmeas' <= `samplesize'
			reshape long `perms', i(`objofmeas') j(_order)	
			by `objofmeas' : gen `crossedfacet' = ceil(_n/`perobs')
			drop _order randnum
			rename `perms' `namelist'
			tempfile data 
			save `data'
		}
		merge 1:1 `objofmeas' `crossedfacet' `namelist' using `data'
		gen selected = (_merge == 3)
		drop _merge
	}
end 

program randobselecter
	syntax varlist(max=1) , nobs(integer) 
	
	tempvar select 
	
	quietly {	
		preserve
		
			gen placeholder = 1
			collapse placeholder, by(`varlist')
			gen randnum = runiform()
			sort randnum
			gen n = _n
			keep if n <= `nobs'
			mata createlist(st_data(.,"`varlist'"))
			
		restore
		
		gen `select' = inlist(`varlist',`obslist')
		keep if `select' == 1
	}
	
end 

program randnestedobselecter
	syntax varlist(max=1), nobs(integer) measureobj(varlist max = 1)  
	
	tempvar select randnum n

	bysort `measureobj' : gen `randnum' = runiform()
	sort `measureobj' `randnum' 
	by `measureobj' : gen `n' = _n
	keep if `n' <= `nobs'
	replace `varlist' = `n'
	
end 

program strataobselecter
	syntax varlist(max=1 fv) , 				///
	outcome(varlist max = 1)  				///
	measureobj(varlist max = 1)  			///
	nobs(numlist max = 1) 					///
	cuts(numlist max = 1) 					///
	[above(numlist max = 1) below(numlist max = 1)] 
	
	tempvar select 
	
	quietly {	
		
		preserve
		
			areg `outcome' i.`varlist', a(`measureobj')
			contrasts g.`varlist' 
			matrix b = r(b)'
			gen obsdiff = . 
			forvalues i = 1/`:rowsof(b)' {
				replace obsdiff = b[`i',1] if `varlist' == `i' 
			}
			collapse obsdiff , by(`varlist')
			egen cuts = cut(obsdiff), group(`cuts') icodes
			replace cuts = cuts + 1
			
			bysort cuts: gen randnum = runiform()
			sort cuts randnum
			by cuts: gen n = _n
			by cuts: gen N = _N
			
			noisily tab cuts 
			if ("`below'" != "" ) keep if cuts < `below'
			if ("`above'" != "" ) keep if cuts > `above'
			if ("`below'" != "" & "`above'" != "") {
				di as err "Cannot select above and below, you buffoon"
					exit 198
			}
	
			if N[1] < `nobs'  {
				di as err "number of observations requested exceeds number available per strata"
				exit 198
			}

			noisily tab cuts 
			keep if n <= `nobs'
			noisily list `varlist' obsdiff cuts
			mata createlist(st_data(.,"`varlist'"))
			
		restore
		
		gen `select' = inlist(`varlist',`obslist')
		keep if `select' == 1
	}
	
end 

mata 
void createlist(real colvector fvlevels)
{
	string vector obs
	string scalar obslist
	
	obs = strofreal(fvlevels)'
	obs = obs[1..(length(obs)-1)]:+"," , obs[length(obs)]
	obslist = invtokens(obs)
	
	st_local("obslist",obslist)
}
end

* ---------------------------------------------------------------------------- * 
*! Permutation Function

mata
real matrix insrow(real matrix m, real vector v,real scalar r) 
{
	real matrix tmp
	
	if (r==1) tmp=v\m
	else if (r==rows(m)+1) tmp=m\v
	else tmp=m[1..(r-1),.]\v\m[r..rows(m),.]
	return(tmp)
}
real matrix permmat(real colvector v) 
{
	real matrix tmp,ctmp,m,vnew
	
	m=rows(v)
	tmp=v[1]
	for (j=2;j<=m;j++) {
		ctmp=J(j,0,.)
		for (k=1;k<=j;k++) {
			vnew=J(1,cols(tmp),v[j])
			ctmp=ctmp,insrow(tmp,vnew,k)
		}
		tmp=ctmp
	}
	return(uniqrows(tmp'))
}
real matrix choosek(real matrix P, real scalar k)
{
	return(uniqrows(P[1...,1..k]))
}
real matrix permn(real scalar n, | real scalar k)
{
	real colvector v 
	
	v = range(1,n,1)
	if (args() == 1) return(permmat(v))
	else return(choosek(permmat(v),k))
}
end

* ---------------------------------------------------------------------------- * 
*! program to make reshaping to long with long item sets much easier 

program stubs_for_reshape, rclass 
	syntax varlist, Start(integer) End(integer)
	
	tempname a b 

	mata `a' = tokens(st_local("varlist"))
	mata `b' = J(1,cols(`a'),"")
	mata for(i=1;i<=(cols(`a'));i++) `b'[1,i] = substr(`a'[1,i], `start', `end')
	mata `b' = uniqrows(`b'')'
	mata st_local("stubs",invtokens(`b'))
	
	return local stubs `stubs' 
end 


* ---------------------------------------------------------------------------- * 
*! Why is replace not part of the encode command!??!?!?

program encodereplace, nclass 

	syntax varlist(max = 1), [strip(integer 0)]
	
	tempvar temp 
	encode `varlist' , gen(`temp')
	drop `varlist' 
	rename `temp' `varlist'
	if (`strip' != 0) label values `varlist' . 
end 

* ---------------------------------------------------------------------------- * 
*! Partial correlations and their significance tests

mata 
real matrix pcorr(real matrix Covmat)
{
	real matrix Inv, D, R 
	
	Inv = luinv(Covmat)
	D = diag(1:/sqrt(diagonal(Inv)))
	R = - D * Inv * D 
	_diag(R,J(rows(R),1,1))
	_makesymmetric(R)
	return(R)
}
struct z_pval 
{
	real matrix Z 
	real matrix Pval
}
struct z_pval compute_z_pval(real matrix Pcorr, real scalar n) 
{
	
	struct z_pval scalar res
	real scalar num_S, p 
	
	p = rows(Pcorr)
	num_S = p - 2
	res.Z = J(p,p,.)
	res.Pval = J(p,p,.)
	for(i=1;i<=p;i++) {
		for(j=1;j<=p;j++) {
			if (i != j) {
				res.Z[i,j] = sqrt(n - num_S - 3) * 0.5 * log((1 + Pcorr[i, j]) / (1 - Pcorr[i, j]))
				res.Pval[i,j] = 2 * (1 - normal(abs(res.Z[i, j])))
			}
		}
	}
	_makesymmetric(res.Z)
	_makesymmetric(res.Pval)
	
	return(res)
}
real matrix adjacency(real matrix Pval, real scalar alpha) return(mm_cond(Pval:<=alpha,1,0))


end 

* ---------------------------------------------------------------------------- * 
*! Flips a masking vector using

mata real vector flip_select(real vector mask) return(mm_cond(mask:>0,mask:-mask,mask:+1))

* ---------------------------------------------------------------------------- * 
*! Composite SEM weights and significance tests 

program weightSEs, rclass
	syntax , Matrix(string)
	
	tempname temp result x rn cn weqs pos 
	
	python: from __main__ import compositeweights
	
	* create symbol matrix 
	local rownames: rowfullnames `matrix'
	local colnames: colfullnames `matrix' 
	mata `x' = st_matrix("`matrix'")
	mata `rn' = tokens(st_local("rownames"))
	mata `cn' = tokens(st_local("colnames"))
	mata symbolmat = symbolmat(`x',`rn',`cn')
	
	* symbolically invert symbol matrix in python 
	quietly python: compositeweights("symbolmat")
	
	* use equations to compute SEs via delta method
	mata `weqs' = ustrsplit(st_local("eq"),",")
	mata st_local("numrows",strofreal(cols(`weqs')))
	forvalues i = 1/`numrows' {
		mata st_local("weq`i'",`weqs'[`i'])
		quietly nlcom `weq`i''
		mat `temp' = r(table)[1..6,1]'
		mat `result' = (nullmat(`result') \ `temp')
	}
	
	* results 
	mata `pos' = strpos(`rn'[1],":")
	mata st_local("vars",invtokens(substr(`rn' ,`pos'+1)))
	foreach x of local vars {
		local name   "`x'"
		local names `" `names' "`name'" "'
	}
	matrix rownames `result' = `names'
	matlist `result'
	return matrix table = `result'
end

mata 
string matrix symbolmat(real matrix X,string vector rn,string vector cn)
{
	real scalar   	pos1,pos2
	string vector 	rn2,cn2 
	string matrix 	symbolmat
	
	pos1 = strpos(rn[1],":")
	pos2 = strpos(cn[1],":")
	rn2  = substr(rn ,pos1+1)
	cn2  = substr(cn ,pos2+1)
	
	symbolmat = J(rows(X),cols(X),"")
	for(i=1;i<=rows(X);i++){
		for(j=1;j<=cols(X);j++){
			if (X[i,j] != 0) symbolmat[i,j] = "_b[" + rn2[i] + ":" + cn2[j] + "]"
		}
	}
		
	return(symbolmat)
}
end 

python 

import numpy as np
from sympy import Symbol, Matrix
from sfi import Macro, Mata

class compositeweights:	
	def __init__(self, matrixname):
		self._matrix = np.matrix(Mata.get(f"{matrixname}"))
		self._symbolic_matrix = self._createsymbolic()
		self._composite_weights = self._compweights()
		self._return_as_macro()

	def _createsymbolic(self):
		variables = {}
		for index, element in np.ndenumerate(self._matrix):
			var_name = f"{index[0]}_{index[1]}"
			if element == "":
				variables[var_name] = 0
			else:
				variables[var_name] = Symbol(str(element))
		rows, cols = self._matrix.shape
		return Matrix(rows, cols, lambda i, j: variables[f"{i}_{j}"])

	def _compweights(self):
		return self._symbolic_matrix.inv()[0, :]

	def _return_as_macro(self):
		nested_list = self._composite_weights.tolist()
		flattened = [item for sublist in nested_list for item in sublist]
		string = ", ".join(map(str, flattened))
		Macro.setLocal("eq", string)
end 

* ---------------------------------------------------------------------------- * 
*! Functions and programs for importing .txt files and placing them in a data frame
*! Command to spit text into lines 

mata 
struct myproblem {
	struct file_record scalar fr
	string scalar line
	real scalar output_fh
}
struct file_record {
	string scalar id 
	string scalar text
}
void driver(string scalar filespec, string scalar output_filename)
{
	string colvector filenames
	real scalar i
	real scalar output_fh
	filenames = sort(dir(".", "files", filespec),1)
	output_fh = fopen(output_filename, "w")
	for (i=1; i<=length(filenames); i++) {
		process_file(filenames[i], output_fh)
	}
	fclose(output_fh)
}
void process_file(string scalar filename, real scalar output_fh)
{
	struct myproblem scalar pr
	initialize_record(pr.fr)
	pr.output_fh = output_fh
	pr.fr.id = filename
	storetext(pr)
	output_record(pr)
}
void initialize_record(struct file_record scalar fr)
{
	fr.id = ""
	fr.text = ""
}
void storetext(struct myproblem scalar pr) 
{
	real scalar fh
	
	pr.fr.text = ""
	fh = fopen(pr.fr.id, "r")
		while ((pr.line=fget(fh))!=J(0,0,"")) {
				pr.fr.text = pr.fr.text + "\n" + pr.line 
			}
	fclose(fh)
	pr.fr.text = subinstr(pr.fr.text, `"""', "")
}
void output_record(struct myproblem scalar pr)
{
	fput(pr.output_fh, sprintf(`""%s" "%s""', pr.fr.id, pr.fr.text))
}

end 

program splittext, nclass 
	syntax varlist(max=1), Id(varlist) Regex(string)
	tempname hold data res 
	
	mkf `hold' 
	quietly {
		sort `id'
		egen id = group(`id')
		mata `data' = st_sdata(.,"`varlist'")	
		mata `res'  = splittext(`data',"`regex'") 
		frame `hold'{
			getmata (text id)  = `res'
			destring id , replace
			bysort id: gen linenum = _n
			tempfile expandedtext
			save `expandedtext'
		}
		
		drop `varlist'
		merge 1:m id using `expandedtext'
		drop _merge 
	}
end 

mata 
string matrix splittext(string matrix text, string scalar regex)
{
	string matrix temp1,temp2,res
	real scalar i 
	
	res = J(0,2,"")
	for (i=1;i<=rows(text);i++) {
		temp1 = ustrsplit(text[i],regex)'
		temp2 = temp1,J(rows(temp1),1,strofreal(i))
		res = res \ temp2
	}
	return(res) 
}

* ---------------------------------------------------------------------------- * 
*! Generalized Local Linear Approximation - Functions to create embeddings matrix 
*  and calculate numerical derivatives 

mata
real matrix embeddings(real matrix v,real scalar E,real scalar tau)
{
	real scalar rows,cols,i,j
	real matrix X
	
	rows = length(v) - (E - 1) * tau
	cols = E
	X = J(rows,cols,.)
	
	for(i=1;i<=rows(X);i++) {
		pos = i 
		for(j=1;j<=cols(X);j++) {
			X[i,j] = v[pos]
			pos = pos + tau 
		}
	}
	return(X)
}

real matrix getL(real scalar numE,real scalar tau, real scalar dorder)
{
	
	real matrix 	X
	real scalar 	i 
	
	L = J(numE,0,.)
	for (i=0;i<=dorder;i++) L = L, getLcol(numE,tau,i)
	return(L)
}

real colvector getLcol(real scalar numE,real scalar tau, real scalar dorder) 
{
	real colvector nu, Lcol
	real scalar i 
	
	nu = range(1,numE,1)
	Lcol = J(rows(nu),1,.)
	for (i=1;i<=rows(nu);i++) {
		Lcol[i] = ((tau * (nu[i] - mean(nu))) ^ dorder) / factorial(dorder)
	}
	return(Lcol)
}

real matrix Y(real matrix X, real matrix L) 
{
	real matrix Y 

	Y = X * L * luinv(L'*L)
	return(Y)
}
end

end 
	


